/*
 *  Copyright 2010 jahziah.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License. *  under the License.
 */

/*
 * LoginFrame.java
 *
 * Created on Dec 30, 2010, 3:58:29 AM
 */
package net.cheesecan.cheeselobby.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.JSeparator;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.rtf.RTFEditorKit;
import net.cheesecan.cheeselobby.io.SettingsFile;
import net.cheesecan.cheeselobby.ui.interfaces.LoginControllerFacade;
import net.cheesecan.cheeselobby.lobby_connection.interfaces.LoginObserver;

/**
 *
 * @author jahziah
 */
public class LoginFrame extends JInternalFrame implements ActionListener, LoginObserver {

    private final LoginControllerFacade loginController;
    private final NewMainFrame parent;
    private final SettingsFile settings;

    /** Creates new form LoginFrame */
    public LoginFrame(LoginControllerFacade controller, NewMainFrame parent, SettingsFile settings) {
        this.loginController = controller;
        this.parent = parent;
        this.settings = settings;

        initComponents();

        // Compute size and location of login
        // int width = 700;
        // int height = 400;
        //setMinimumSize(new Dimension(width, height));
        //setSize(new Dimension(width, height));
        pack();
        double x = NewMainFrame.getScreenSize().getWidth() / 2;
        double y = NewMainFrame.getScreenSize().getHeight() / 2;
        setLocation((int) x - getWidth() / 2, (int) ((int) y - getHeight() / 1.5));

        // Set icon
        setFrameIcon(new ImageIcon(getClass().getResource("/img/window/login.png")));

        // Set title
        setTitle("Login");
        // Set login components to their state depending on how settings are
        userNameBox.setSelectedItem(settings.getUsername());
        loginAutomaticallyCheckbox.setSelected(settings.getLoginAutomatically());

        // Set password if we have remember password on
        if (!settings.getPassword().equals("")) {
            passwordField.setText(settings.getPassword());
            rememberPasswordCheckbox.setSelected(true);
        }

        // Check if login automatically is set and we have password set since earlier
        if (loginAutomaticallyCheckbox.isSelected() && !settings.getPassword().equals("")) {
            loginBtnActionPerformed(null);
        }

        // Add listener for enter presses
        KeyAdapter enterPressAdapter = new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    loginBtnActionPerformed(null);
                }
            }
        };
        userNameBox.addKeyListener(enterPressAdapter);
        passwordField.addKeyListener(enterPressAdapter);


        // Register as a login observer with the login controller
        loginController.registerAsLoginObserver(this);
        
        progressBar.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPanel = new JPanel();
        userNameBox = new JComboBox();
        passwordLbl = new JLabel();
        usernameLbl = new JLabel();
        loginBtn = new JButton();
        progressBar = new JProgressBar();
        passwordField = new JPasswordField();
        rememberPasswordCheckbox = new JCheckBox();
        loginAutomaticallyCheckbox = new JCheckBox();
        jButton1 = new JButton();
        jLabel1 = new JLabel();

        getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.LINE_AXIS));

        userNameBox.setEditable(true);

        passwordLbl.setText("Password:");

        usernameLbl.setText("Username:");

        loginBtn.setText("Login");
        loginBtn.addActionListener(this);

        rememberPasswordCheckbox.setText("Remember password");

        loginAutomaticallyCheckbox.setText("Login automatically next time");
        loginAutomaticallyCheckbox.addActionListener(this);

        jButton1.setText("Register");
        jButton1.setToolTipText("Register a new account using the username and password you enter.");
        jButton1.addActionListener(this);

        jLabel1.setFont(new Font("Ubuntu", 1, 14)); // NOI18N
        jLabel1.setForeground(new Color(0, 5, 255));
        jLabel1.setText("Forgot your password?");
        jLabel1.setEnabled(false);

        GroupLayout loginPanelLayout = new GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addGroup(loginPanelLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(usernameLbl)
                            .addComponent(passwordLbl))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(loginPanelLayout.createParallelGroup(Alignment.LEADING)
                            .addGroup(Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, 349, GroupLayout.PREFERRED_SIZE))
                            .addComponent(userNameBox, GroupLayout.PREFERRED_SIZE, 349, GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4))
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(ComponentPlacement.RELATED, 279, GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginPanelLayout.createParallelGroup(Alignment.TRAILING, false)
                        .addComponent(progressBar, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginBtn, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginAutomaticallyCheckbox, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                        .addComponent(rememberPasswordCheckbox, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)))
                .addContainerGap())
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(loginPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(usernameLbl)
                    .addComponent(userNameBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLbl))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(rememberPasswordCheckbox)
                .addGap(2, 2, 2)
                .addComponent(loginAutomaticallyCheckbox)
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(loginBtn)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(loginPanel);
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == loginBtn) {
            LoginFrame.this.loginBtnActionPerformed(evt);
        }
        else if (evt.getSource() == loginAutomaticallyCheckbox) {
            LoginFrame.this.loginAutomaticallyCheckboxActionPerformed(evt);
        }
        else if (evt.getSource() == jButton1) {
            LoginFrame.this.jButton1ActionPerformed(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // Perform login
        login();
    }//GEN-LAST:event_loginBtnActionPerformed

    private void loginAutomaticallyCheckboxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loginAutomaticallyCheckboxActionPerformed
        if (loginAutomaticallyCheckbox.isSelected()) {
            settings.setLoginAutomatically(true);
        } else {
            settings.setLoginAutomatically(false);
        }
        // save setting immediately
        settings.save();
    }//GEN-LAST:event_loginAutomaticallyCheckboxActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loginController.register(userNameBox.getSelectedItem().toString(), new String(passwordField.getPassword()));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void login() {
        // Disable the login button
        loginBtn.setEnabled(false);

        String username = userNameBox.getSelectedItem().toString();
        String password = new String(passwordField.getPassword());

        // Always remember username that was last used
        settings.setUsername(username);

        // Is remember password checked? If so then store it
        if (rememberPasswordCheckbox.isSelected()) {
            settings.setPassword(password);
        }

        // If we have disabled remember password, remove the stored password
        if (!rememberPasswordCheckbox.isSelected()) {
            settings.setPassword("");
        }

        // Save updates to settings
        settings.save();

        // Call login controller
        loginController.login(username, password);

        // Set wait cursor
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        // Set progress bar
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);
    }

    /**
     * Methods below are called by login controller.
     */
    @Override
    public void loginSuccess() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                // Finish progress bar
                progressBar.setIndeterminate(false);

                // Notify our parent that we're closing
                parent.loginFinished();
                
                progressBar.setVisible(false);
            }
        });
    }

    @Override
    public void loginFail(final String reason) {
        final LoginFrame thisPtr = this;
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                resetLoginFrameState();

                // Show error popup
                JOptionPane.showMessageDialog(thisPtr, "Login failed: " + reason);
                
                progressBar.setVisible(false);
            }
        });
    }

    private void resetLoginFrameState() {
        // Reset to default cursor
        setCursor(Cursor.getPredefinedCursor(Cursor.getDefaultCursor().getType()));
        // Disable progress bar
        progressBar.setIndeterminate(false);
        // Enable login button again
        loginBtn.setEnabled(true);
    }

    @Override
    public void registrationSuccess() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, "Registration was a success.", "Registration done", JOptionPane.INFORMATION_MESSAGE);
            }
        });
    }

    @Override
    public void registrationFail(final String reason) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, "Registration failed: " + reason, "Registration failed", JOptionPane.INFORMATION_MESSAGE);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JLabel jLabel1;
    private JCheckBox loginAutomaticallyCheckbox;
    private JButton loginBtn;
    private JPanel loginPanel;
    private JPasswordField passwordField;
    private JLabel passwordLbl;
    private JProgressBar progressBar;
    private JCheckBox rememberPasswordCheckbox;
    private JComboBox userNameBox;
    private JLabel usernameLbl;
    // End of variables declaration//GEN-END:variables

    public void changeAccountName(String previousName, String newName) {
        userNameBox.setSelectedItem(newName);
        settings.save();
    }

    @Override
    public void displayAgreement(final StringReader rtf) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                new AgreementDialog(rtf).setVisible(true);
            }
        });
    }

    private class AgreementDialog extends JDialog implements ActionListener {

        private RTFEditorKit rtfEd;
        private JEditorPane editor;
        private JButton accept;
        private JButton reject;

        public AgreementDialog(StringReader rtf) {
            setModal(true);
            setTitle("Terms of use");

            rtfEd = new RTFEditorKit();
            editor = new JEditorPane();

            editor.setEditable(false);
            editor.setEditorKit(rtfEd);

            try {
                rtfEd.read(rtf, editor.getDocument(), 0);
            } catch (IOException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadLocationException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            String str = null;
            try {
                str = editor.getDocument().getText(0, editor.getDocument().getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            JTextPane text = new JTextPane();
            text.setText(str);
            text.setEditable(false);

            accept = new JButton("Accept");
            reject = new JButton("Reject");
            accept.addActionListener(this);
            reject.addActionListener(this);

            add(text, BorderLayout.PAGE_START);
            add(accept, BorderLayout.LINE_END);
            add(reject, BorderLayout.LINE_START);

            setSize(480, 575);
            setLocation((int) NewMainFrame.getScreenSize().getWidth() / 2 - getWidth(),
                    (int) NewMainFrame.getScreenSize().getHeight() / 2 - getHeight());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == accept) {
                loginController.acceptTOS();
                login();
            } else {//reject
                loginController.disconnect();
            }
            resetLoginFrameState();
            setVisible(false);
        }
    }
}
